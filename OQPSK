clc 
clear all
close all

Nbits = 5000; % N bits

spb = 10; %samples per symbol
real_bits = sign(randn(1,Nbits));
imag_bits = sign(randn(1,Nbits));
Random = upsample(real_bits,spb); %Random sequence (in phase)
%Random = [Random zeros(1,spb/2)]; %Adding zeros to indicate offset in phase component
RandomQ = upsample(imag_bits,spb); %Random sequence (quadrature)
%RandomQ = [zeros(1,spb/2) RandomQ]; %Adding zeros to indicate offset in quadrature component
% real_preamble = sign(randn(1,1000));
% imag_preamble = sign(randn(1,1000));
real_preamble = upsample(sign(mls(2^10-1)),spb)';
imag_preamble = upsample(sign(mls(2^10-1)),spb)';
Random = [real_preamble Random];
RandomQ = [imag_preamble RandomQ];
IQ = Random + j*RandomQ; %In phase, quadrature

Fc = 4000; % Carrier frequency
Fs = 10000; % Sampling frequency
%numCycles = 137.5 ;
%Tb = numCycles/Fc;  % Bit duration
%t = 0:1/Fs:(numCycles-1/Fs); %Period of one cycle
%t = t(1:2500);
n = 0:(Nbits+2^10-1)*spb-1;
t = n/Fs;

A = 1;

%carrier = A*cos(2*pi*(Fc/Fs)*n); %Carrier wave
carrier = A*exp(j*2*pi*(Fc/Fs)*n); %Carrier wave
real_carrier = real(carrier);

ps_size = 16;
%ps = boxcar(ps_size);
ps = blackman(ps_size);
filtered_IQ = filter(ps,1,IQ); %Pulse shaping 
figure()
plot(real(filtered_IQ),'b-');
hold on
plot(imag(filtered_IQ),'r-');
hold off
title('Pulse Shaping of Random Sequence')


I_bits = Random; %% Polar data of 1s and -1s
Q_bits = RandomQ; 
figure()
plot(I_bits,'bx-'); %Plotting both IQ bits
hold on
plot(Q_bits,'rx-');
hold off
title('Bipolar bitstream')



qpsk = carrier.*filtered_IQ; %offset bpsk
qpsk = [qpsk zeros(1,2012)] ; %Burst qpsk

figure(3)
plot(real(qpsk),'bx-'); %Real part of obpsk
hold on
plot(imag(qpsk),'rx-'); %Imaginary part of obpsk
hold off
title('QPSK Modulated Signal')

figure(5)
freqz(real(qpsk),1,2^10,'whole',Fs); 
title('QPSK Spectrum')
ylim([-50 80]);

figure(6)
freqz(filtered_IQ,1,2^10,'whole',Fs);
title('Baseband Spectrum')
ylim([-80 80]);

%sound(qpsk);
%soundsc(real(qpsk));
[audio,Fs_audio] = audioread('qpsk_sound.m4a');
audio_length=length(audio);
trans_audio = transpose(audio);

n2 = 0:length(qpsk)-1;

%Demodulation
demod_carrier = A*exp(-j*2*pi*(Fc/Fs)*n2); %same as carrier

%demod_sig = real(awgn_oqpsk).*demod_carrier;
demod_sig = qpsk.*demod_carrier;
% demod_sig = [zeros(1,2345) demod_sig zeros(1,5820)];
demod_sig = [demod_sig zeros(1,5820)];

demod_pass = lowpass(demod_sig,40,Fs);

preamble = filtered_IQ(1:spb*(2^10-1));

z = filter(fliplr(conj(preamble)),1,demod_sig);
[Max,index] = max(abs(z))
correlation  = z(index)
figure(15)
plot(abs(z))

buffered_IQ = filtered_IQ;

%**Divide into real and imaginary componenets
demod_data_imag = imag(buffered_IQ(index+spb:spb:length(buffered_IQ))*(correlation'));
demod_data_real = real(buffered_IQ(index+spb:spb:length(buffered_IQ))*(correlation'));

figure(16)
plot(demod_data_real)
title('Real Part of Phase Corrected Demodulated Data')
figure(17)
plot(demod_data_imag)
title('Imaginary Part of Phase Corrected Demodulated Data')

%demod_data = downsample(demod_data,spb);
i=1;
data_real = zeros(1,length(demod_data_real)); %recieved data bit stream
data_imag = zeros(1,length(demod_data_imag)); %recieved data bit stream
while i<length(demod_data_real)
    if demod_data_real(i) < 0
    data_real(i) = 0;
    end
    if demod_data_real(i) >= 0
    data_real(i) = 1;
    end
    i = i +1;
end

while i<length(demod_data_imag)
    if demod_data_imag(i) < 0
    data_imag(i) = 0;
    end
    if demod_data_imag(i) >= 0
    data_imag(i) = 1;
    end
    i = i +1;
end
% data = circshift(data,-1);
figure(18)
hold on
stem(real_bits,'-b');
stem(demod_data_real/2000,'-r');
hold off
title('Comparison of Real Bits and Demodulated Real Bits')
xlabel('Bits');
legend('Original Bits','Demodulated Bits')
figure(19)
hold on
stem(imag_bits,'-b');
stem(demod_data_imag/2000,'-r');
hold off
title('Comparison of Imaginary Bits and Imaginary Real Bits');
xlabel('Bits');
legend('Original Bits','Demodulated Bits')
return
%turns polar NRZ random bits at the start to 0 and 1
%Random = downsample([real_preamble Random],spb);
x  = Random(length(real_preamble)+1:spb:length(Random));
%Original_data = zeros(1,length(x));

i = 1;
while i<length(x)
    
    if x(i) < 0
    Original_data(i) = 0;
    end
    if x(i) >= 0
    Original_data(i) = 1;
    end
    i = i +1;
end


%compares real data to random 
% error = biterr(Original_data,data)

figure(14)
hold on
stem(Original_data,'-b')
stem(data_real,'-r')
hold off

fileID = fopen('test.txt','w');
fprintf(fileID,'%6.2f\n',Original_data);
fclose(fileID);
